/* Adrian Monges 	among003@ucr.edu
 * Patrick Ong		pong001@ucr.edu
 * Lab Section 21
 * Lab 9 Exercise 1
 * 
 * I acknowledge all content contained herein, excluding
 * template or example code, is my own original work.
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <timer.c>


unsigned char button;
unsigned char button2;
unsigned char button3;
//volatile unsigned char TimerFlag;



enum dance{left, right} state;
	
	


void set_PWM(double frequency) {

	static double current_frequency; // Keeps track of the currently set frequency

	// Will only update the registers when the frequency changes, otherwise allows

	// music to play uninterrupted.

	if (frequency != current_frequency) {

		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter

		else { TCCR3B |= 0x03; } // resumes/continues timer/counter

		

		// prevents OCR3A from overflowing, using prescaler 64

		// 0.954 is smallest frequency that will not result in overflow

		if (frequency < 0.954) { OCR3A = 0xFFFF; }

		

		// prevents OCR0A from underflowing, using prescaler 64     // 31250 is largest frequency that will not result in underflow

		else if (frequency > 31250) { OCR3A = 0x0000; }

		

		// set OCR3A based on desired frequency

		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }

		

		TCNT3 = 0; // resets counter

		current_frequency = frequency; // Updates the current frequency

	}

}

//blue swede, hooked on a feeling: 121 bpm


void PWM_on() {

	TCCR3A = (1 << COM3A0);

	// COM3A0: Toggle PB3 on compare match between counter and OCR0A

	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);

	// WGM02: When counter (TCNT0) matches OCR0A, reset counter

	// CS01 & CS30: Set a prescaler of 64

	set_PWM(0);

}



void PWM_off() {

	TCCR3A = 0x00;

	TCCR3B = 0x00;

}

void setDance(){
	switch(state){
		
		case left:
		state = right;
		set_PWM(950);
		break;
		
		case right:
		state = left;
		set_PWM(236);
		break;	
	}	
}



int calculate_Mili(int bpm){
	
	
	return 60000/bpm;
	
	
	
}


int main(void)
{
    /* Replace with your application code */
	
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0x00; PORTA = 0xFF;
	
	unsigned char change = 0;
	unsigned char bpm = 121;
	
	
	state = left;
	TimerFlag = 0;
	TimerSet(calculate_Mili(bpm));
	TimerOn();
	PWM_on();
	
    while (1) 
    {
		button = ~PINA & 0x01;
		button2 = ~PINA & 0x02;
		button3 = ~PINA & 0x04;
		
		while(!TimerFlag){};
		
		setDance();
		TimerFlag = 0;
		change++;
		if (change == 10){
			//TimerSet(250);
			
		}
		
    }
}

